
const axios = require('axios');
const sendMessage = require('../handles/sendMessage');

// Base URL de l'API
const BASE_API_URL = 'https://zaikyoov3-up.up.railway.app/api/r1-online';

module.exports = async (senderId, userText) => {
    // Extraire le prompt en retirant le pr√©fixe 'online' et en supprimant les espaces superflus
    const prompt = userText.slice(6).trim();

    // V√©rifier si le prompt est vide
    if (!prompt) {
        await sendMessage(senderId, '‚ö†Ô∏è Veuillez fournir une question ou un probl√®me √† r√©soudre.\n\nExemple: `online r√©soudre l\'√©quation y = 2x + 3`');
        return;
    }

    try {
        // Cr√©er un ID de session unique bas√© sur l'ID de l'utilisateur et l'heure
        const sessionId = `${senderId}-${Date.now()}`;

        // Envoyer un message d'attente avec animation
        await sendMessage(senderId, "üîç Recherche en cours...\n‚è≥ Veuillez patienter quelques instants...");

        // Appeler l'API avec le prompt fourni
        const apiUrl = `${BASE_API_URL}?prompt=${encodeURIComponent(prompt)}&session=${sessionId}`;
        const response = await axios.get(apiUrl);

        // R√©cup√©rer la r√©ponse de l'API
        const reply = response.data.reply;

        // Formater la r√©ponse avec une d√©coration √©l√©gante
        const formattedReply = formatReply(reply, prompt);

        // Envoyer la r√©ponse format√©e √† l'utilisateur
        await sendMessage(senderId, formattedReply);
    } catch (error) {
        console.error('Erreur lors de l\'appel √† l\'API:', error);

        // Envoyer un message d'erreur d√©cor√© √† l'utilisateur
        await sendMessage(senderId, `‚ùå *ERREUR DE CONNEXION* ‚ùå\n\n‚ö†Ô∏è D√©sol√©, je n'ai pas pu traiter votre demande en raison d'un probl√®me technique.\n\nüîÑ Veuillez r√©essayer dans quelques instants ou contacter l'administrateur si le probl√®me persiste.`);
    }
};

/**
 * Formate la r√©ponse avec une d√©coration √©l√©gante
 * @param {string} reply - La r√©ponse brute de l'API
 * @param {string} prompt - La question de l'utilisateur
 * @returns {string} - La r√©ponse format√©e
 */
function formatReply(reply, prompt) {
    // Nettoyer la syntaxe LaTeX
    let formattedReply = cleanLatexSyntax(reply);

    // Cr√©er le d√©but de la r√©ponse
    let finalReply = `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    finalReply += `üîç *QUESTION* :\n${prompt}\n`;
    finalReply += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    finalReply += `üìù *R√âPONSE* :\n`;

    // Diviser la r√©ponse en sections pour un meilleur formatage
    const sections = formattedReply.split('---');
    
    if (sections.length > 1) {
        // Si la r√©ponse contient des sections (s√©par√©es par ---)
        sections.forEach((section, index) => {
            // Nettoyer et formater chaque section
            const cleanedSection = section.trim()
                .replace(/###/g, "‚ú®") // Remplacer les ### par des √©toiles
                .split('\n')
                .join('\n');

            finalReply += cleanedSection;

            // Ajouter un s√©parateur entre les sections sauf pour la derni√®re
            if (index < sections.length - 1) {
                finalReply += `\n${'-'.repeat(30)}\n`;
            }
        });
    } else {
        // Si la r√©ponse ne contient pas de sections
        const lines = formattedReply.split('\n');
        finalReply += lines.join('\n');
    }

    // Ajouter une signature et la date
    const date = new Date().toLocaleString('fr-FR', { 
        timeZone: 'Europe/Paris',
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });

    finalReply += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nü§ñ G√©n√©r√© par R1 Online | ${date}`;

    return finalReply;
}

/**
 * Nettoie la syntaxe LaTeX pour un affichage plus propre
 * @param {string} text - Le texte √† nettoyer
 * @returns {string} - Le texte nettoy√©
 */
function cleanLatexSyntax(text) {
    return text
        // Supprimer les commandes LaTeX comme \( et \)
        .replace(/\\\(|\\\\\(|\\\\\\\(/g, "")
        .replace(/\\\)|\\\\\)|\\\\\\\)/g, "")
        // Remplacer les fractions
        .replace(/\\frac\{([^{}]+)\}\{([^{}]+)\}/g, "$1/$2")
        // Remplacer les commandes LaTeX comme \implies, \boxed, etc.
        .replace(/\\implies/g, "=>")
        .replace(/\\boxed\{([^{}]+)\}/g, "[$1]")
        .replace(/\\[a-zA-Z]+/g, "")
        // Remplacer les doubles backslashes
        .replace(/\\\\/g, "")
        // Nettoyer les accolades
        .replace(/\{|\}/g, "")
        // Remplacer d'autres notations math√©matiques
        .replace(/\\quad/g, " ")
        .replace(/\\cdot/g, "√ó")
        .replace(/\\times/g, "√ó")
        .replace(/\\div/g, "√∑")
        // Remplacer les expressions comme \text{...} par leur contenu
        .replace(/\\text\{([^{}]+)\}/g, "$1")
        // Nettoyer les expressions avec \equiv et \pmod
        .replace(/\\equiv[^\\]*\\pmod\{([^{}]+)\}/g, "‚â° (mod $1)")
        // Nettoyer les math√©matiques restantes
        .replace(/\\[a-zA-Z]+\{([^{}]+)\}/g, "$1");
}

// Ajouter les informations de la commande
module.exports.info = {
    name: "online",
    description: "R√©sout des probl√®mes math√©matiques, √©quations et autres questions scientifiques via l'API Zaikyoo R1.",
    usage: "Envoyez 'online <votre probl√®me>' pour obtenir une solution d√©taill√©e et format√©e."
};
