
const axios = require('axios');
const sendMessage = require('../handles/sendMessage');

const fontMapping = {
  'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
  'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
  'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
  'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
  'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
  'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
  'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
  'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
};

function convertToBold(text) {
  return text.replace(/(?:\*\*(.*?)\*\*|## (.*?)|### (.*?))/g, (match, boldText, h2Text, h3Text) => {
    const targetText = boldText || h2Text || h3Text;
    return [...targetText].map(char => fontMapping[char] || char).join('');
  });
}

function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}

module.exports = async (senderId, prompt) => {
  if (!prompt) {
    await sendMessage(senderId, 'ùóòùóøùóøùóºùóø: ùó£ùóπùó≤ùóÆùòÄùó≤ ùóΩùóøùóºùòÉùó∂ùó±ùó≤ ùóÆ ùóΩùóøùóºùó∫ùóΩùòÅ ùó≥ùóºùóø ùó†ùó≤ùòÅùóÆ ùóîùóú.\nùóòùòÖùóÆùó∫ùóΩùóπùó≤: miora hi there!');
    return;
  }

  try {
    // Envoyer un message de chargement
    await sendMessage(senderId, "‚è≥ Connexion √† Meta AI en cours...");
    
    const apiUrl = `https://jer-ai.gleeze.com/meta?senderid=${encodeURIComponent(senderId)}&message=${encodeURIComponent(prompt)}`;
    const { data } = await axios.get(apiUrl);

    if (!data.response) {
      await sendMessage(senderId, 'ùóòùóøùóøùóºùóø: ùó°ùóº ùóøùó≤ùòÄùóΩùóºùóªùòÄùó≤ ùóøùó≤ùó∞ùó≤ùó∂ùòÉùó≤ùó± ùó≥ùóøùóºùó∫ ùó†ùó≤ùòÅùóÆ ùóîùóú.');
      return;
    }

    const formatted = convertToBold(data.response);
    const maxMessageLength = 2000;
    const messages = splitMessageIntoChunks(formatted, maxMessageLength);

    // Attendre un court instant avant d'envoyer la r√©ponse
    await new Promise(resolve => setTimeout(resolve, 1000));

    for (let i = 0; i < messages.length; i++) {
      await sendMessage(senderId, i === 0 ? `‚àû | ùó†ùó≤ùòÅùóÆ ùóîùóú :\n\n${messages[i]}` : messages[i]);
    }

  } catch (error) {
    console.error('Meta AI command error:', error.message);
    await sendMessage(senderId, 'ùóòùóøùóøùóºùóø: ùóôùóÆùó∂ùóπùó≤ùó± ùòÅùóº ùó∞ùóºùóªùóªùó≤ùó∞ùòÅ ùòÅùóº ùó†ùó≤ùòÅùóÆ ùóîùóú ùóîùó£ùóú.');
  }
};

// Ajouter les informations de la commande
module.exports.info = {
  name: "miora",
  description: "Discutez avec Meta AI, l'assistant intelligent de Facebook.",
  usage: "Envoyez 'miora <message>' pour obtenir une r√©ponse de Meta AI."
};
