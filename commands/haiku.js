
const axios = require('axios');
const sendMessage = require('../handles/sendMessage');

module.exports = async (senderId, prompt) => {
    try {
        // V√©rifier si le prompt est vide ou ne contient que des espaces
        if (!prompt || prompt.trim() === '') {
            // Envoyer un message d'invitation si l'utilisateur envoie juste 'haiku'
            await sendMessage(senderId, "üåü Claude 3 Haiku üåü\n\nVeuillez poser votre question apr√®s la commande 'haiku'.\n\nExemple: `haiku qui es-tu?`");
            return;
        }

        // Envoyer un message de confirmation que la demande est en cours de traitement
        await sendMessage(senderId, "üîç Traitement de votre demande en cours... Un instant !");

        // Construire l'URL de l'API avec le prompt de l'utilisateur
        const apiUrl = `https://kaiz-apis.gleeze.com/api/claude3-haiku?ask=${encodeURIComponent(prompt)}`;
        
        // Appel √† l'API
        const response = await axios.get(apiUrl);
        
        // R√©cup√©rer les donn√©es de la r√©ponse
        const { response: haikusResponse, author } = response.data;
        
        // Am√©liorer la pr√©sentation des √©quations math√©matiques
        let enhancedResponse = haikusResponse
            // Mettre en √©vidence les √©quations
            .replace(/(\d+[x]\s*[-+]\s*\d+\s*=\s*\d+)/g, '„Äå$1„Äç')
            // Mettre en √©vidence les r√©sultats importants
            .replace(/(x\s*=\s*\d+)/g, '„Äé$1„Äè')
            // Remplacer les √©tapes num√©rot√©es par quelque chose de plus visuel
            .replace(/√âtape (\d+)/gi, 'üìù √âtape $1 üìù')
            // Remplacer les \n par de vrais sauts de ligne
            .replace(/\\n/g, '\n');
        
        // Formater la r√©ponse avec un meilleur espacement et structure
        // Diviser la r√©ponse en paragraphes et appliquer un formatage am√©lior√©
        const paragraphs = haikusResponse.split(/\n{2,}|\n\\n|\n\n/g);
        const formattedParagraphs = paragraphs.map(p => {
            // Ajouter des √©mojis pertinents aux √©tapes num√©rot√©es
            return p.replace(/^\d+\.\s*/g, match => `üîπ ${match}`);
        }).join('\n\n');
        
        // Ajouter des s√©parateurs visuels pour une meilleure lisibilit√©
        const formattedResponse = `‚ú®üåü ùêÇùê•ùêöùêÆùêùùêû ùüë ùêáùêöùê¢ùê§ùêÆ üåü‚ú®\n\n${formattedParagraphs}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nùêÄùêÆùê≠ùêûùêÆùê´ : ‚úÖ ùêÅùê´ùêÆùêßùê® ‚úÖ`;
        
        // Si la r√©ponse est trop longue, la diviser en plusieurs messages
        if (formattedResponse.length > 1000) {
            // Diviser la r√©ponse en sections logiques
            const sections = formattedResponse.split('\n\n');
            
            // Envoyer le titre en premier
            await sendMessage(senderId, sections[0]);
            
            // Envoyer le contenu principal
            let currentMessage = "";
            for (let i = 1; i < sections.length - 1; i++) {
                // Si l'ajout de la section ferait d√©passer la limite
                if (currentMessage.length + sections[i].length + 2 > 600) {
                    // Envoyer ce qui a √©t√© accumul√©
                    if (currentMessage.length > 0) {
                        await sendMessage(senderId, currentMessage);
                        // Attendre un court instant entre les messages
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }
                    currentMessage = sections[i];
                } else {
                    // Sinon ajouter la section au message en cours
                    currentMessage += (currentMessage ? '\n\n' : '') + sections[i];
                }
            }
            
            // Envoyer ce qui reste
            if (currentMessage.length > 0) {
                await sendMessage(senderId, currentMessage);
            }
            
            // Envoyer la signature de l'auteur √† la fin
            await sendMessage(senderId, sections[sections.length - 1]);
        } else {
            // Envoyer la r√©ponse compl√®te si elle n'est pas trop longue
            await sendMessage(senderId, formattedResponse);
        }
        
    } catch (error) {
        console.error("Erreur lors de l'appel √† l'API Claude 3 Haiku:", error);
        
        // Envoyer un message d'erreur √† l'utilisateur en cas de probl√®me
        await sendMessage(senderId, "D√©sol√©, une erreur s'est produite lors du traitement de votre demande avec Claude 3 Haiku. Veuillez r√©essayer plus tard.");
    }
};

// Ajouter les informations de la commande
module.exports.info = {
    name: "haiku",
    description: "Discutez avec Claude 3 Haiku, un mod√®le d'IA cr√©√© par Anthropic.",
    usage: "Envoyez 'haiku <question>' pour poser une question √† Claude 3 Haiku."
};
